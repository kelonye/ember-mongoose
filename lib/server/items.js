// Generated by CoffeeScript 1.6.2
module.exports = function(model) {
  var Model, items, plural, singular;

  items = {};
  Model = model.Model;
  singular = model.singularName;
  plural = model.pluralName;
  Model.schema.post('save', function(item) {
    var id, m, _i, _len, _ref, _results;

    _ref = model.belongsToPaths;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      id = item[m.belongsToName];
      if (id) {
        _results.push(m.Model.findById(id, function(err, mItem) {
          if (err) {
            throw err;
          }
          mItem[model.hasManyName].push(item.id);
          return mItem.save(function(err) {
            if (err) {
              throw err;
            }
          });
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });
  Model.schema.pre('remove', function(next) {
    var belongsToMutex, handleBelongsTos, handleHasManys, hasManyMutex, that;

    that = this;
    belongsToMutex = model.belongsToPaths.length;
    hasManyMutex = model.hasManyPaths.length;
    if (belongsToMutex === 0 && hasManyMutex === 0) {
      return next();
    } else {
      handleBelongsTos = function(fn) {
        var id, m, _i, _len, _ref, _results;

        _ref = model.belongsToPaths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          id = that[m.belongsToName];
          if (!id) {
            if (--belongsToMutex === 0) {
              _results.push(fn());
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(m.Model.findById(id, function(err, mItem) {
              if (err) {
                throw err;
              }
              mItem[model.hasManyName].remove(that.id);
              return mItem.save(function(err, mItem) {
                if (err) {
                  throw err;
                }
                if (--belongsToMutex === 0) {
                  return fn();
                }
              });
            }));
          }
        }
        return _results;
      };
      handleHasManys = function(fn) {
        var m, query, _i, _len, _ref, _results;

        _ref = model.hasManyPaths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          query = {};
          query[m.belongsToName] = this.id;
          _results.push(m.Model.find(query).remove().exec(function(err) {
            if (err) {
              throw err;
            }
            if (--hasManyMutex === 0) {
              return fn();
            }
          }));
        }
        return _results;
      };
      if (belongsToMutex === 0) {
        return handleHasManys(next);
      } else if (hasManyMutex === 0) {
        return handleBelongsTos(next);
      } else {
        return handleBelongsTos(function() {
          return handleHasManys(next);
        });
      }
    }
  });
  items.all = function(req, res) {
    return Model.find(req.query, function(err, items) {
      var array, json;

      if (err) {
        return res.send(err);
      }
      if (items == null) {
        items = [];
      }
      array = items.filter(function(item) {
        return item.__isReadable__(req, function(err, can) {
          if (err) {
            throw err;
          }
          if (can !== true) {
            return false;
          }
          return true;
        });
      });
      json = {};
      json[plural] = array;
      return res.send(json);
    });
  };
  items.create = function(req, res) {
    var item;

    if (req.body.q) {
      req.query = req.body.q;
      return items.all(req, res);
    }
    item = new Model(req.body[singular]);
    return item.__isCreatable__(req, function(err, can) {
      if (err) {
        return res.send(err);
      }
      if (can !== true) {
        return res.send(can);
      }
      return item.save(function(err, item) {
        var json;

        if (err) {
          return res.send(err);
        }
        json = {};
        json[singular] = item;
        return res.send(json);
      });
    });
  };
  items.one = function(req, res) {
    return Model.findById(req.params.id, function(err, item) {
      if (err) {
        return res.send(err);
      }
      return item.__isReadable__(req, function(err, can) {
        var json;

        if (err) {
          return res.send(err);
        }
        if (can !== true) {
          return res.send(can);
        }
        json = {};
        json[singular] = item;
        return res.send(json);
      });
    });
  };
  items.update = function(req, res) {
    return Model.findByIdAndUpdate(req.params.id, req.body[singular], function(err, item) {
      if (err) {
        return res.send(err);
      }
      return item.__isUpdatable__(req, function(err, can) {
        var json;

        if (err) {
          return res.send(err);
        }
        if (can !== true) {
          return res.send(can);
        }
        json = {};
        json[singular] = item;
        return res.send(json);
      });
    });
  };
  items.remove = function(req, res) {
    return Model.findById(req.params.id, function(err, item) {
      if (err) {
        return res.send(err);
      }
      return item.__isRemovable__(req, function(err, can) {
        if (err) {
          return res.send(err);
        }
        if (can !== true) {
          return res.send(can);
        }
        return item.remove(function(err) {
          if (err) {
            return res.send(err);
          }
          return res.send({});
        });
      });
    });
  };
  return items;
};
