// Generated by CoffeeScript 1.6.2
module.exports = function(model) {
  var Batch, Model, items, l, plural, singular;

  l = console.log;
  Batch = require('batch');
  items = {};
  Model = model.Model;
  singular = model.singularName;
  plural = model.pluralName;
  Model.schema.post('save', function(item) {
    var id, m, _i, _len, _ref, _results;

    _ref = model.belongsToPaths;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      id = item[m.belongsToName];
      if (id) {
        _results.push(m.Model.findById(id, function(err, mItem) {
          if (err) {
            throw err;
          }
          mItem[model.hasManyName].push(item.id);
          return mItem.save(function(err) {
            if (err) {
              throw err;
            }
          });
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });
  Model.schema.pre('remove', function(next) {
    var batch, m, that, _fn, _i, _len, _ref, _ref1;

    if ((model.belongsToPaths.length === (_ref = model.hasManyPaths.length) && _ref === 0)) {
      return next();
    } else {
      that = this;
      batch = new Batch;
      _ref1 = model.belongsToPaths;
      _fn = function(m) {
        var id;

        id = that[m.belongsToName];
        if (id) {
          return batch.push(function(fn) {
            return m.Model.findById(id, function(err, item) {
              if (err) {
                return fn(err);
              }
              item[model.hasManyName].remove(that.id);
              return item.save(function(err) {
                if (err && err.message === 'No matching document found.') {
                  err = null;
                }
                return fn(err);
              });
            });
          });
        }
      };
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        m = _ref1[_i];
        _fn(m);
      }
      return batch.end(function(err) {
        var _fn1, _j, _len1, _ref2;

        if (err) {
          return next(err);
        }
        batch = new Batch;
        _ref2 = model.hasManyPaths;
        _fn1 = function(m) {
          return batch.push(function(fn) {
            var query;

            query = {};
            query[model.belongsToName] = that.id;
            return m.Model.find(query).remove(fn);
          });
        };
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          m = _ref2[_j];
          _fn1(m);
        }
        return batch.end(next);
      });
    }
  });
  items.all = function(req, res) {
    return Model.find(req.query, function(err, items) {
      var array, json;

      if (err) {
        return res.send(err);
      }
      if (items == null) {
        items = [];
      }
      array = items.filter(function(item) {
        return item.__isReadable__(req, function(err, can) {
          if (err) {
            throw err;
          }
          if (can !== true) {
            return false;
          }
          return true;
        });
      });
      json = {};
      json[plural] = array;
      return res.send(json);
    });
  };
  items.create = function(req, res) {
    var item;

    if (req.body.q) {
      req.query = req.body.q;
      return items.all(req, res);
    }
    item = new Model(req.body[singular]);
    return item.__isCreatable__(req, function(err, can) {
      if (err) {
        return res.send(err);
      }
      if (can !== true) {
        return res.send(can);
      }
      return item.save(function(err, item) {
        var json;

        if (err) {
          return res.send(err);
        }
        json = {};
        json[singular] = item;
        return res.send(json);
      });
    });
  };
  items.one = function(req, res) {
    return Model.findById(req.params.id, function(err, item) {
      if (err) {
        return res.send(err);
      }
      return item.__isReadable__(req, function(err, can) {
        var json;

        if (err) {
          return res.send(err);
        }
        if (can !== true) {
          return res.send(can);
        }
        json = {};
        json[singular] = item;
        return res.send(json);
      });
    });
  };
  items.update = function(req, res) {
    return Model.findByIdAndUpdate(req.params.id, req.body[singular], function(err, item) {
      if (err) {
        return res.send(err);
      }
      return item.__isUpdatable__(req, function(err, can) {
        var json;

        if (err) {
          return res.send(err);
        }
        if (can !== true) {
          return res.send(can);
        }
        json = {};
        json[singular] = item;
        return res.send(json);
      });
    });
  };
  items.remove = function(req, res) {
    return Model.findById(req.params.id, function(err, item) {
      if (err) {
        return res.send(err);
      }
      return item.__isRemovable__(req, function(err, can) {
        if (err) {
          return res.send(err);
        }
        if (can !== true) {
          return res.send(can);
        }
        return item.remove(function(err) {
          if (err) {
            return res.send(err);
          }
          return res.send({});
        });
      });
    });
  };
  return items;
};
